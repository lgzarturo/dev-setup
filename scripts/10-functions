#!/usr/bin/env zsh

function list_space {
  du -sh -- $1*  | sort -rg
}

# Create a new directory and enter it
function mkd() {
	# mkdir -p "$@" && cd "$_";
	mkdir -p "$@" && echo "👋🏻 Ahora estas en el directorio: $@" && builtin cd "$@" || exit 1
}

# Renames all items in a directory to lower case.
rename_files_to_lowercase() {
    for i in *; do
        echo "Renaming $i to ${i,,}"
        mv "$i" "${i,,}";
    done
}

# Find filename
find_file() {
    for FILE in $(find . -type f -name "*$1"); do
        echo ${FILE};
    done
}

# Always ssh with -X
ssh() {
    command ssh -X "$@"
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using '${cmd}'...";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Extract
function extract() {
    case $1 in
        *.tar.gz|*.tgz) tar xzvf $1 ;;
        *.tar.xz) tar Jxvf $1 ;;
        *.zip) unzip $1 ;;
        *.lzh) lha e $1 ;;
        *.tar.bz2|*.tbz) tar xjvf $1 ;;
        *.tar.Z) tar zxvf $1 ;;
        *.gz) gzip -dc $1 ;;
        *.bz2) bzip2 -dc $1 ;;
        *.Z) uncompress $1 ;;
        *.tar) tar xvf $1 ;;
        *.arj) unarj $1 ;;
        *.rar) unrar $1 ;;
        *.7z) 7z x $1 ;;         # require: p7zip p7zip-full
        *.cab) cabextract $1 ;;  # require: cabextract
        *.jar) java -jar $1 & ;; # Launch java app
    esac
}
alias -s {gz,tgz,zip,lzh,bz2,tbz,Z,tar,arj,xz,rar,7z,cab,jar}=extract

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

function urlencode() {
    echo $1 | nkf -WwMQ | sed -e 's/=/%/g'
}

function urldecode() {
    echo $1 | nkf --url-input
}

function c2b() {
    TARGET=$1
    cat $TARGET | pbcopy
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}');
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

function checkport() {
	local port="${1:-8080}";
	sleep 1 && netstat -an | grep ${port};
	sleep 1 && lsof -i TCP:${port};
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

function ip_info() {
    domain=$1
		ip=$(nslookup ${domain} | awk -F': ' 'NR==6 { print $2 }')
    curl https://ipinfo.io/${ip} > /tmp/out.html && open /tmp/out.html
}

# Run `dig` and display the most useful info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
    dig +nocmd "www.$1" +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Los comandos mas usados
function commands() {
  awk '{a[$2]++}END{for(i in a){print a[i] " " i}}'
}

alias topten="history | commands | sort -rn | head"

function watch_traffic() {
  sudo tcpdump -i any -s 0 -n port ${1:-80}
}

cd() {
    builtin cd "$@" && ls;
}

# Cheatsheets
cht() {
    # Cheatsheets https://github.com/chubin/cheat.sh
    if [ -z "${1}" ]; then
        echo "Usage $0 {filename}"
        echo "eg: cht ls"
    else
        curl -L "https://cheat.sh/$1" > /tmp/out.html && open /tmp/out.html
    fi
}

# create Script
touch_script() {
    echo "#!/usr/bin/env zsh" >> $1 && chmod a+x $1 && vim $1;
}

# Agregar un alias
add_alias() {
    if [ -n "$2" ]; then
        echo "alias $1=\"$2\"" >> ~/.zsh_scripts/07-aliases
        source ~/.zshrc
    else
        echo "Usage: add_alias <alias> <command>"
    fi
}

psgrep() {
	if [ ! -z $1 ] ; then
		echo "Grepping for processes matching $1..."
		ps aux | grep $1 | grep -v grep
	else
		recho "!! Need name to grep for"
	fi
}

extract_audio_from_video() {
    ffmpeg -i $1 -vn -b:a 320k output-audio.mp3
}

pdf_merge(){
    pdftk "$1" "$2" cat output mergedfile.pdf
}

sonar_metal() {
	sonar-scanner -Dsonar.projectKey=metal -Dsonar.sources=. -Dsonar.host.url=http://localhost:9001 -Dsonar.login=8e32a9035cca6698dd002ac2b29c5e1692edde95
}

jpa() {
  open "https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation"
}

gitflow() {
  open "https://danielkummer.github.io/git-flow-cheatsheet/index.es_ES.html"
}

